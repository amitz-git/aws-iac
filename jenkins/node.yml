---
- name: Install & Configure Jenkins Nodes
  hosts: master
  become: true
  vars:
    jenkins_url: "http://{{ ansible_ssh_host }}:8080"
    jenkins_username: "admin"
    node_home: "/home/jenkins"
    node_docker: "docker"
    node_terraform: "terraform"

  tasks:
    - name: Read initial secrets
      community.docker.docker_container_exec:
        container: jenkins
        command: "cat /var/jenkins_home/secrets/initialAdminPassword"
      register: initial_pwd
      ignore_errors: true

    - name: Generate Jenkins node XML configuration for non-master groups
      template:
        src: node.xml.j2
        dest: "/tmp/{{ item }}_node.xml"
      loop: "{{ groups.keys() | difference(['master', 'all', 'ungrouped']) }}" # loop exclude all, master & ungrouped

    - name: Ensure Jenkins Nodes Exist (Only for Non-Master Groups)
      shell: |
        if java -jar /home/ubuntu/jenkins-cli.jar -s {{ jenkins_url }} -auth {{ jenkins_username }}:{{ initial_pwd.stdout }} get-node {{ item }} >/dev/null 2>&1; then
          echo "Node {{ item }} already exists, skipping..."
        else
          java -jar /home/ubuntu/jenkins-cli.jar -s {{ jenkins_url }} -auth {{ jenkins_username }}:{{ initial_pwd.stdout }} create-node {{ item }} < /tmp/{{ item }}_node.xml
        fi
      loop: "{{ groups.keys() | difference(['master', 'all', 'ungrouped']) }}"
  
    - name: Set facts
      ansible.builtin.set_fact:
        initial_pwd: "{{ initial_pwd.stdout }}"
      delegate_facts: true

#Play 2: Node hosts 
- name: Configure Jenkins Slave Nodes
  hosts:
    - docker
    - terraform
  become: true
  vars:
  tasks:
    - name: Initial password debug
      ansible.builtin.debug:
        msg: "Initial Password: {{hostvars[groups['master'][0]]['initial_pwd']}}"

    - name: Ensure Jenkins group exists
      ansible.builtin.group:
        name: jenkins
        state: present

    - name: Ensure Jenkins user exists
      ansible.builtin.user:
        name: jenkins
        group: jenkins
        home: /home/jenkins
        shell: /bin/bash
        state: present

    - name: Create Jenkins work directory
      ansible.builtin.file:
        path: /home/jenkins
        state: directory
        owner: jenkins
        group: jenkins
        mode: 0777

    - name: Download agent.jar using curl
      ansible.builtin.shell:
        cmd: "curl -sO http://{{ groups['master'][0] }}:8080/jnlpJars/agent.jar"
      register: curl_result
      retries: 5
      delay: 10
      until: curl_result.rc == 0

    - name: Fetch JNLP file for Jenkins agent
      get_url:
        url: "http://{{ groups['master'][0] }}:8080/computer/{{ item }}/slave-agent.jnlp"
        dest: "/tmp/slave-agent.jnlp"
        headers:
          Jenkins-Crumb: "a123random456number"
        url_username: "admin"
        url_password: "{{hostvars[groups['master'][0]]['initial_pwd']}}"
        force_basic_auth: yes
      loop: "{{ group_names }}"

    - name: Install required packages for secret extraction from xml
      ansible.builtin.apt:
        name:
          - libxml2-utils
        state: present
        update_cache: yes

    - name: Extract secret from JNLP file
      shell: "xmllint --xpath 'string(//jnlp/application-desc/argument[1])' /tmp/slave-agent.jnlp > /tmp/slave-secret.txt"
      #register: jenkins_secret
      changed_when: false

    # - name: Debug - Show extracted secret
    #   debug:
    #     msg: "{{ jenkins_secret.stdout }}"

    - name: Start Jenkins agent
      shell: "nohup java -jar agent.jar -url http://{{ groups['master'][0] }}:8080/ -secret @/tmp/slave-secret.txt -name {{ item }} -webSocket -workDir /home/jenkins > /home/jenkins/agent.log 2>&1"
      loop: "{{ group_names }}"
      async: 10
      poll: 0
